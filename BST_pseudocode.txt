=================
dodawanie:
=================
fun insert(data):
    create newNode
    newNode->data = data
    newNode->parent = nullptr
    newNode->left = nullptr
    newNode->right = nullptr

    if root = nullptr, then:
        root <- newNode
        return

    current <- root
    parent <- nullptr

    while current =/= nullptr, do:
        parent <- current
        if data > current->data, then:
            current = current->right

        else if data < current->data, then:
            current = current->left

        else:
            delete newNode
            return

    if data > parent->data, then:
        parent->right <- newNode
    else:
        parent->left <- newNode
    newNode->parent <- parent


=================
szukanie:
=================
fun search(data):
    current <- root
    while current =/= nullptr and current->data =/= data, do:
	    if data > current->data, then:
	        current = current->right
	    else:
	        current = current->left
   return current

=================
usuwanie:
=================
fun remove(data):
    found <- search(data)
    if found = nullptr, then:  // W drzewie nie ma podanej wartosci
	    return

    if found->left = nullptr and found->right = nullptr, then:  // Case 1: Node is leaf
	    if found = found->parent->left, then:
	        found->parent->left <- nullptr
	    else:
	        found->parent->right <- nullptr
	        delete found

    else if found->left =/= nullptr XOR found->right =/= nullptr, then:  // Case 2: Node has only one child
        if found->left =/= nullptr, then:
            subTree <- found->left
        else:
            subTree <- found->right
        if found = root, then:
            root <- subTree
        else:
            subTree->parent <- found->parent
            if found->parent->left = found, then:
                found->parent->left <- subTree
            else:
                found->parent->right <- subTree
        delete found

    else if found->left =/= nullptr and found->right =/= nullptr, then:  // Case 3: Node has 2 children
        subTreeLeft <- found->left
        subTreeRight <- found->right

        successor <- found->right
        while successor->left =/= nullptr, do:
            successor <- successor->left

        if successor = subTreeRight, then:
            subTreeLeft->parent <- successor
            if found =/= root, then:
                 if found = found->parent->left, then:
                      found->parent->left <- successor

                 else:
                      found->parent->right <- successor
                 successor->parent = found->parent

            else:
                 successor->parent <- nullptr
            successor->left <- subTreeLeft
            return

        if successor->right =/= nullptr, then:
            successor->parent->left <- successor->right
        else:
            successor->parent->left = nullptr

        if found =/= root, then:
            found->parent <- successor->parent
        else:
            successor->parent = nullptr
            root = successor

        if found->parent->left = found, then:
            found->parent->left <- successor
        else:
            found->parent->right <- successor

        successor->left <- subTreeLeft
        successor->right <- subTreeRight
        delete found

















